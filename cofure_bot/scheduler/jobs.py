# cofure_bot/scheduler/jobs.py

import aiohttp
import datetime as dt
from datetime import datetime, timedelta
from telegram.ext import Application, ContextTypes, JobQueue
import pytz

from cofure_bot.config import TELEGRAM_ALLOWED_USER_ID, TZ_NAME
from cofure_bot.signals.engine import generate_batch, generate_signal
from cofure_bot.data.binance_client import active_symbols, top_gainers, quick_signal_metrics
from cofure_bot.data.macro_calendar import fetch_macro_today, fetch_macro_week
from cofure_bot.storage.state import (
    bump_signals, bump_alerts, snapshot,
    can_alert_symbol, mark_alert_symbol,
    can_alert_this_hour, bump_alert_hour,
    get_sticky_message_id, set_sticky_message_id,
)

VN_TZ = pytz.timezone(TZ_NAME)

# ========= NG∆Ø·ª†NG & C·∫§U H√åNH C∆† B·∫¢N =========
MIN_QUOTE_VOL   = 5_000_000.0
MAX_CANDIDATES  = 60

WORK_START      = 6
WORK_END        = 22

# Ng∆∞·ª°ng s∆° b·ªô ƒë·ªÉ r√† kh·∫©n
ALERT_FUNDING   = 0.02
ALERT_VOLRATIO  = 1.8

# T·∫ßn su·∫•t/gi·ªõi h·∫°n kh·∫©n
ALERT_COOLDOWN_MIN   = 180      # 3 ti·∫øng/coin
ALERT_TOPK           = 1        # ch·ªâ l·∫•y 1 coin t·ªët nh·∫•t/l∆∞·ª£t
ALERT_MAX_PER_RUN    = 1        # g·ª≠i 1 tin duy nh·∫•t/l∆∞·ª£t ƒë·ªÉ th·∫≠t ‚Äús·∫°ch‚Äù
ALERT_SCORE_MIN      = 3.0
ALERT_PER_HOUR_MAX   = 2        # m·ªói gi·ªù t·ªëi ƒëa 2 tin kh·∫©n
PIN_URGENT           = True

# B·ªè cooldown n·∫øu c·ª±c m·∫°nh
ALERT_STRONG_VOLRATIO = 3.0
ALERT_SCORE_STRONG    = 6.0

# Sao cho t√≠n hi·ªáu ƒë·ªãnh k·ª≥
STAR_SCORE_THRESHOLD  = 5.0

# ========= NG∆Ø·ª†NG ‚ÄúV√ÄO NGAY‚Äù C·ª∞C CH·∫∂T CHO KH·∫®N =========
URGENT_VOLRATIO_MIN        = 2.5   # vol b√πng n·ªï t·ªëi thi·ªÉu
URGENT_FUNDING_MIN         = 0.03  # |funding| t·ªëi thi·ªÉu
URGENT_VOLRATIO_MAX        = 6.0   # qu√° h·ªón lo·∫°n th√¨ b·ªè
URGENT_REQUIRE_TREND_ALIGN = True  # y√™u c·∫ßu xu h∆∞·ªõng c√πng chi·ªÅu
URGENT_MIN_RR              = 1.50  # y√™u c·∫ßu Risk/Reward t·ªëi thi·ªÉu
URGENT_ENTRY_SLIPPAGE_MAX  = 0.003 # |entry - last|/last <= 0.3% (v√†o ngay)

# ====== CACHE ƒë∆°n gi·∫£n cho ph√¢n t√≠ch l·ªãch ======
_pre_announced = set()   # id@-30/-15/-05
_post_reported  = set()  # id sau tin

# ========= TI·ªÜN √çCH =========
def _in_work_hours() -> bool:
    now = datetime.now(VN_TZ)
    return WORK_START <= now.hour < WORK_END

def _day_name_vi(d: datetime) -> str:
    return {1:"Th·ª© 2",2:"Th·ª© 3",3:"Th·ª© 4",4:"Th·ª© 5",5:"Th·ª© 6",6:"Th·ª© 7",7:"Ch·ªß nh·∫≠t"}[d.isoweekday()]

def _fmt_signal(sig: dict) -> str:
    label = "M·∫°nh" if sig["strength"] >= 70 else ("Ti√™u chu·∫©n" if sig["strength"] >= 50 else "Tham kh·∫£o")
    side_square = "üü©" if sig["side"] == "LONG" else "üü•"
    reasons = []
    if "funding" in sig and sig["funding"] is not None: reasons.append(f"Funding={sig['funding']:.4f}")
    if "vol_ratio" in sig and sig["vol_ratio"] is not None: reasons.append(f"Vol5m=x{sig['vol_ratio']:.2f}")
    if sig.get("rsi") is not None: reasons.append(f"RSI={sig['rsi']}")
    if sig.get("ema9") is not None: reasons.append(f"EMA9={sig['ema9']}")
    if sig.get("ema21") is not None: reasons.append(f"EMA21={sig['ema21']}")
    reason_str = ", ".join(reasons)
    return (
        f"üìà {sig['token']} ‚Äî {side_square} {sig['side']}\n\n"
        f"üü¢ Lo·∫°i l·ªánh: {sig.get('signal_type','Scalping')}\n"
        f"üîπ Ki·ªÉu v√†o l·ªánh: {sig.get('order_type','Market')}\n"
        f"üí∞ Entry: {sig['entry']}\n"
        f"üéØ TP: {sig['tp']}\n"
        f"üõ°Ô∏è SL: {sig['sl']}\n"
        f"üìä ƒê·ªô m·∫°nh: {sig['strength']}% ({label})\n"
        f"üìå L√Ω do: {reason_str}\n"
        f"üïí Th·ªùi gian: {sig['time']}"
    )

# ====== Heuristic bias theo lo·∫°i tin ======
def _macro_bias(event_title_en: str, actual: str, forecast: str, previous: str) -> str:
    t = (event_title_en or "").lower()
    def num(x):
       try: 
           return float(str(x).replace('%','').replace(',','').strip())
       except: 
           return None
    a, f, p = num(actual), num(forecast), num(previous)

    if any(k in t for k in ["cpi","pce","ppi","inflation"]):
        if a is not None and f is not None:
            return "‚úÖ Risk-on (l·∫°m ph√°t th·∫•p h∆°n d·ª± b√°o)" if a < f else "‚ö†Ô∏è Risk-off (l·∫°m ph√°t cao h∆°n d·ª± b√°o)"
        return "‚ÑπÔ∏è Theo d√µi l·∫°m ph√°t: th·∫•p ‚Üí on, cao ‚Üí off"

    if any(k in t for k in ["unemployment","jobless"]):
        if a is not None and f is not None:
            return "‚ö†Ô∏è Risk-off (th·∫•t nghi·ªáp cao h∆°n d·ª± b√°o)" if a > f else "‚úÖ Risk-on (th·∫•t nghi·ªáp th·∫•p h∆°n d·ª± b√°o)"
        return "‚ÑπÔ∏è Theo d√µi th·∫•t nghi·ªáp: cao ‚Üí off, th·∫•p ‚Üí on"

    if any(k in t for k in ["non-farm","nfp","payrolls"]):
        if a is not None and f is not None:
            if a > 1.3 * f: return "‚ö†Ô∏è C√≥ th·ªÉ Risk-off (qu√° n√≥ng ‚Üí Fed hawkish)"
            if a > f:       return "‚úÖ H∆°i Risk-on (vi·ªác l√†m t·ªët h∆°n d·ª± b√°o)"
            return "‚ö†Ô∏è H∆°i Risk-off (vi·ªác l√†m k√©m)"
        return "‚ÑπÔ∏è Theo d√µi NFP: t·ªët v·ª´a ‚Üí on, qu√° n√≥ng ‚Üí off"

    if any(k in t for k in ["interest rate","fomc","rate decision","fed"]):
        if actual:
            at = actual.lower()
            if "cut" in at:                         return "‚úÖ Nghi√™ng Risk-on (c·∫Øt l√£i)"
            if "hike" in at or "+" in at:           return "‚ö†Ô∏è Nghi√™ng Risk-off (tƒÉng l√£i)"
            if "hold" in at or previous == actual:  return "‚ÑπÔ∏è Trung t√≠nh (gi·ªØ nguy√™n)"
        return "‚ÑπÔ∏è Ch·ªù chi ti·∫øt quy·∫øt ƒë·ªãnh & h·ªçp b√°o"

    if any(k in t for k in ["retail sales","pmi","ism","gdp"]):
        if a is not None and f is not None:
            return "‚úÖ Risk-on (s·ªë li·ªáu t·ªët h∆°n)" if a > f else "‚ö†Ô∏è Risk-off (s·ªë li·ªáu x·∫•u h∆°n)"
        return "‚ÑπÔ∏è S·ªë li·ªáu t·ªët ‚Üí on, x·∫•u ‚Üí off"

    return "‚ÑπÔ∏è S·ª± ki·ªán vƒ© m√¥ quan tr·ªçng ‚Äî ph·∫£n ·ª©ng tu·ª≥ b·ªëi c·∫£nh"

# ========= 06:00 ‚Äî Ch√†o bu·ªïi s√°ng =========
async def job_morning(context: ContextTypes.DEFAULT_TYPE):
    usd_vnd = None
    try:
        async with aiohttp.ClientSession() as s:
            try:
                async with s.get("https://api.exchangerate.host/latest",
                                 params={"base":"USD","symbols":"VND"},
                                 timeout=aiohttp.ClientTimeout(total=10)) as r:
                    if r.status == 200:
                        data = await r.json()
                        usd_vnd = float(data.get("rates", {}).get("VND") or 0) or None
            except Exception:
                pass
            if not usd_vnd:
                async with s.get("https://open.er-api.com/v6/latest/USD",
                                 timeout=aiohttp.ClientTimeout(total=10)) as r2:
                    if r2.status == 200:
                        data2 = await r2.json()
                        usd_vnd = float(data2.get("rates", {}).get("VND") or 0) or None
    except Exception:
        usd_vnd = None

    async with aiohttp.ClientSession() as session:
        gainers = await top_gainers(session, 5)

    lines = [f"Ch√†o bu·ªïi s√°ng nh√© Cofure ‚òÄÔ∏è  (1 USD ‚âà {usd_vnd:,.0f} VND)" if usd_vnd else
             "Ch√†o bu·ªïi s√°ng nh√© Cofure ‚òÄÔ∏è  (USD‚âàVND - tham chi·∫øu)", ""]
    lines.append("üî• 5 ƒë·ªìng tƒÉng tr∆∞·ªüng n·ªïi b·∫≠t (24h):")
    for g in gainers:
        sym = g.get("symbol"); chg = float(g.get("priceChangePercent", 0) or 0); vol = float(g.get("quoteVolume", 0) or 0)
        lines.append(f"‚Ä¢ <b>{sym}</b> ‚ñ≤ {chg:.2f}% | Volume: {vol:,.0f} USDT")
    lines += ["", "üìä Funding, volume, xu h∆∞·ªõng s·∫Ω c√≥ trong t√≠n hi·ªáu ƒë·ªãnh k·ª≥ su·ªët ng√†y."]

    await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID,
                                   text="\n".join(lines), parse_mode="HTML",
                                   disable_web_page_preview=True)

# ========= 07:00 ‚Äî L·ªãch vƒ© m√¥ h√¥m nay =========
async def job_macro(context: ContextTypes.DEFAULT_TYPE):
    events = await fetch_macro_today()
    now = datetime.now(VN_TZ)
    header = f"üìÖ {_day_name_vi(now)}, ng√†y {now.strftime('%d/%m/%Y')}"
    if not events:
        await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID,
                                       text=header + "\n\nH√¥m nay kh√¥ng c√≥ tin t·ª©c vƒ© m√¥ quan tr·ªçng.\nCh√∫c b·∫°n m·ªôt ng√†y trade th·∫≠t th√†nh c√¥ng nha!")
        return
    lines = [header, "", "üß≠ L·ªãch tin vƒ© m√¥ quan tr·ªçng:"]
    for e in events:
        tstr = e["time_vn"].strftime("%H:%M")
        extra = []
        if e.get("forecast"): extra.append(f"D·ª± b√°o {e['forecast']}")
        if e.get("previous"): extra.append(f"Tr∆∞·ªõc {e['previous']}")
        extra_str = (" ‚Äî " + ", ".join(extra)) if extra else ""
        left = e["time_vn"] - now
        if left.total_seconds() > 0:
            h = int(left.total_seconds() // 3600); m = int((left.total_seconds() % 3600)//60)
            countdown = f" ‚Äî ‚è≥ c√≤n {h} gi·ªù {m} ph√∫t" if h else f" ‚Äî ‚è≥ c√≤n {m} ph√∫t"
        else:
            countdown = ""
        lines.append(f"‚Ä¢ {tstr} ‚Äî {e['title_vi']} ‚Äî ·∫¢nh h∆∞·ªüng: {e['impact']}{extra_str}{countdown}")
    lines.append("\nüí° G·ª£i √Ω: ƒê·ª©ng ngo√†i 5‚Äì10‚Äô quanh gi·ªù ra tin; quan s√°t funding/volume.")
    await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID, text="\n".join(lines))

# ========= T√çNH ƒêI·ªÇM KH·∫®N =========
async def _calc_urgency_components(session, symbol: str):
    m = await quick_signal_metrics(session, symbol, interval="5m")
    last = m.get("last") or 0.0
    ema9  = m.get("ema50") or last
    ema21 = m.get("ema200") or last
    ret15m_abs = abs((ema9 - ema21) / last) * 100.0 if last else 0.0
    vol_ratio = m.get("vol_ratio") or 1.0
    z_vol = max(0.0, vol_ratio - 1.0)
    abs_funding = abs(m.get("funding") or 0.0)
    return ret15m_abs, z_vol, abs_funding, m

def _urgent_score(ret15m_abs, z_vol, abs_funding):
    return 1.0 * z_vol + 0.6 * ret15m_abs + 40.0 * abs_funding

def _fmt_board(picks):
    lines = ["üî¥ B·∫¢NG C·∫¢NH B√ÅO KH·∫®N (Top score)"]
    for it in picks:
        sym = it["symbol"]; sc = it["score"]; m = it["metrics"]
        arrow = "‚ñ≤" if (m.get("vol_ratio") or 1.0) >= 1.8 else ""
        side_hint = "Long nghi√™ng" if (m.get("funding") or 0) > 0 else ("Short nghi√™ng" if (m.get("funding") or 0) < 0 else "Trung t√≠nh")
        lines.append(f"‚Ä¢ {sym} | score {sc:.2f} | Vol5m x{(m.get('vol_ratio') or 1.0):.2f}{arrow} | Funding {m.get('funding',0):.4f} ({side_hint})")
    lines.append("üí° ∆Øu ti√™n theo d√µi top score; ch·ªù ·ªïn ƒë·ªãnh 1‚Äì3 n·∫øn tr∆∞·ªõc khi v√†o.")
    return "\n".join(lines)

# ========= 30' g·ª≠i 5 t√≠n hi·ªáu (g·∫Øn ‚≠ê n·∫øu g·∫ßn kh·∫©n) =========
async def job_halfhour_signals(context: ContextTypes.DEFAULT_TYPE):
    if not _in_work_hours():
        return
    async with aiohttp.ClientSession() as session:
        syms = await active_symbols(session, min_quote_volume=MIN_QUOTE_VOL)
    if not syms: syms = ["BTCUSDT","ETHUSDT","BNBUSDT","SOLUSDT","XRPUSDT"]

    candidates = syms[:MAX_CANDIDATES]
    signals = await generate_batch(candidates, count=5)

    async with aiohttp.ClientSession() as session:
        for i, s in enumerate(signals):
            s["signal_type"] = "Scalping" if i < 3 else "Swing"
            s["order_type"]  = "Market"
            star = ""
            try:
                ret15m_abs, z_vol, abs_funding, m = await _calc_urgency_components(session, s["token"])
                score = _urgent_score(ret15m_abs, z_vol, abs_funding)
                s["funding"]   = m.get("funding")
                s["vol_ratio"] = m.get("vol_ratio")
                if score >= STAR_SCORE_THRESHOLD:
                    star = "‚≠ê <b>T√≠n hi·ªáu n·ªïi b·∫≠t</b>\n\n"
            except Exception:
                pass
            await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID,
                                           text=(star + _fmt_signal(s)),
                                           parse_mode="HTML")
            bump_signals(1)

# ========= KH·∫®N (si·∫øt m·∫°nh: ch·ªâ g·ª≠i khi c√≥ th·ªÉ v√†o ngay) =========
async def job_urgent_alerts(context: ContextTypes.DEFAULT_TYPE):
    if not _in_work_hours(): return
    if not can_alert_this_hour(ALERT_PER_HOUR_MAX): return

    async with aiohttp.ClientSession() as session:
        syms = await active_symbols(session, min_quote_volume=MIN_QUOTE_VOL)
        syms = syms[:MAX_CANDIDATES] if syms else ["BTCUSDT","ETHUSDT","BNBUSDT","SOLUSDT","XRPUSDT"]

        scored = []
        for sym in syms:
            try:
                mq = await quick_signal_metrics(session, sym, interval="5m")
                vr = float(mq.get("vol_ratio") or 1.0)
                fd = abs(float(mq.get("funding") or 0.0))

                # S∆° b·ªô
                if (fd < ALERT_FUNDING) and (vr < ALERT_VOLRATIO): 
                    continue

                # T√≠nh chi ti·∫øt
                ret15m_abs, z_vol, abs_funding, m = await _calc_urgency_components(session, sym)
                score = _urgent_score(ret15m_abs, z_vol, abs_funding)

                # R√†o c·ª©ng ‚Äúr·∫•t t·ª± tin‚Äù
                if vr < URGENT_VOLRATIO_MIN or vr > URGENT_VOLRATIO_MAX: 
                    continue
                if abs_funding < URGENT_FUNDING_MIN: 
                    continue

                # Y√™u c·∫ßu trend align
                if URGENT_REQUIRE_TREND_ALIGN:
                    last = float(m.get("last") or 0.0)
                    ema50 = float(m.get("ema50") or last)
                    ema200 = float(m.get("ema200") or last)
                    trend_long  = last > ema50 > ema200
                    trend_short = last < ema50 < ema200
                    # n·∫øu kh√¥ng r√µ trend th√¨ b·ªè
                    if not (trend_long or trend_short):
                        continue

                # Cooldown theo coin (tr·ª´ khi c·ª±c m·∫°nh)
                strong = (score >= ALERT_SCORE_STRONG) or (vr >= ALERT_STRONG_VOLRATIO)
                if (not strong) and (not can_alert_symbol(sym, ALERT_COOLDOWN_MIN)):
                    continue

                scored.append({"symbol": sym, "score": score, "metrics": m, "trend_long": trend_long if URGENT_REQUIRE_TREND_ALIGN else None})
            except Exception:
                continue

        if not scored: return

        scored.sort(key=lambda x: x["score"], reverse=True)
        picks = scored[:min(ALERT_TOPK, ALERT_MAX_PER_RUN)]

        # L·ªçc l·∫ßn cu·ªëi b·∫±ng ‚Äúkh·∫£ nƒÉng v√†o ngay‚Äù: RR & tr∆∞·ª£t gi√°
        final = []
        for it in picks:
            sym = it["symbol"]; m = it["metrics"]
            try:
                s = await generate_signal(sym)  # c√≥ entry/tp/sl/side/time/strength/...
                last = float(m.get("last") or 0.0)
                entry = float(s["entry"]); tp = float(s["tp"]); sl = float(s["sl"])
                side = s["side"].upper()

                # Ki·ªÉm trend c√πng chi·ªÅu l·ªánh
                if URGENT_REQUIRE_TREND_ALIGN:
                    tl = it["trend_long"]
                    if (side == "LONG" and not tl) or (side == "SHORT" and tl):
                        continue

                # RR t·ªëi thi·ªÉu
                if side == "LONG":
                    rr = (tp - entry) / max(entry - sl, 1e-9)
                else:
                    rr = (entry - tp) / max(sl - entry, 1e-9)
                if rr < URGENT_MIN_RR:
                    continue

                # Tr∆∞·ª£t gi√° so v·ªõi gi√° hi·ªán t·∫°i (v√†o ƒë∆∞·ª£c ngay)
                if last > 0:
                    slippage = abs(entry - last) / last
                    if slippage > URGENT_ENTRY_SLIPPAGE_MAX:
                        continue

                # Nh√∫ng info hi·ªÉn th·ªã
                s["signal_type"] = "Swing (Kh·∫©n)"
                s["order_type"]  = "Market"
                s["funding"]     = m.get("funding")
                s["vol_ratio"]   = m.get("vol_ratio")

                it["signal"] = s
                final.append(it)
            except Exception:
                continue

        if not final: 
            return

        # Ch·ªâ g·ª≠i 1 tin ‚Äúcombo‚Äù + ghim m·ªõi, g·ª° ghim c≈©
        final.sort(key=lambda x: x["score"], reverse=True)
        top = final[:1]

        board = _fmt_board(top)
        detail_lines = ["", "‚è∞ T√çN HI·ªÜU KH·∫®N (V√†o ƒë∆∞·ª£c ngay)"]
        for it in top:
            s = it["signal"]; m = it["metrics"]
            side_hint = "Long nghi√™ng" if (m.get("funding") or 0) > 0 else ("Short nghi√™ng" if (m.get("funding") or 0) < 0 else "Trung t√≠nh")
            guidance = f"\nüí° G·ª£i √Ω: {'MUA ngay' if s['side']=='LONG' else 'B√ÅN ngay'} (ƒë·ªß ƒëi·ªÅu ki·ªán v√†o t·ª©c th√¨) ‚Äî {side_hint}."
            detail_lines += ["", _fmt_signal(s) + guidance]

            mark_alert_symbol(s["token"])
            bump_alerts(1)
            bump_alert_hour()

        combo_text = "\n".join([board] + detail_lines)

        # G·ª≠i
        msg = await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID, text=combo_text, parse_mode="HTML")

        # Pin m·ªõi, g·ª° pin c≈©
        old_mid = get_sticky_message_id()
        if PIN_URGENT:
            try:
                # unpin c≈© tr∆∞·ªõc (n·∫øu c√≥)
                if old_mid and old_mid != msg.message_id:
                    try:
                        await context.bot.unpin_chat_message(chat_id=TELEGRAM_ALLOWED_USER_ID, message_id=old_mid)
                    except Exception:
                        pass
                await context.bot.pin_chat_message(chat_id=TELEGRAM_ALLOWED_USER_ID, message_id=msg.message_id, disable_notification=True)
                set_sticky_message_id(msg.message_id)
            except Exception:
                # sticky ·∫£o
                try:
                    if old_mid:
                        await context.bot.edit_message_text(chat_id=TELEGRAM_ALLOWED_USER_ID, message_id=old_mid, text=combo_text)
                    else:
                        m2 = await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID, text=combo_text, parse_mode="HTML")
                        set_sticky_message_id(m2.message_id)
                except Exception:
                    pass

# ========= PH√ÇN T√çCH L√öC RA TIN ‚Äî TR∆Ø·ªöC GI·ªú =========
async def job_macro_watch_pre(context: ContextTypes.DEFAULT_TYPE):
    events = await fetch_macro_week()
    if not events: return
    now = datetime.now(VN_TZ)
    checkpoints = [30, 15, 5]
    targets = []
    for e in events:
        delta_min = int((e["time_vn"] - now).total_seconds() // 60)
        for cp in checkpoints:
            if delta_min == cp:
                key = f"{e['id']}@-{cp}"
                if key not in _pre_announced:
                    targets.append((e, cp, key))
    if not targets: return

    async with aiohttp.ClientSession() as session:
        def fmt_snap(sym, m):
            return f"{sym}: funding {m.get('funding',0):.4f} | Vol5m x{(m.get('vol_ratio') or 1.0):.2f}"
        for e, cp, key in targets:
            try:
                btc = await quick_signal_metrics(session, "BTCUSDT", interval="5m")
                eth = await quick_signal_metrics(session, "ETHUSDT", interval="5m")
            except Exception:
                btc = {}; eth = {}
            bias = _macro_bias(e.get("title") or "", e.get("actual") or "", e.get("forecast") or "", e.get("previous") or "")
            lines = [
                f"‚è≥ {cp} ph√∫t n·ªØa ra tin: <b>{e['title_vi']}</b>",
                f"üïí Gi·ªù VN: {e['time_vn'].strftime('%H:%M %d/%m')}",
                f"üìä ·∫¢nh h∆∞·ªüng: {e['impact']}",
            ]
            extra = []
            if e.get("forecast"): extra.append(f"D·ª± b√°o: {e['forecast']}")
            if e.get("previous"): extra.append(f"Tr∆∞·ªõc: {e['previous']}")
            if extra: lines.append(" ‚Äî ".join(extra))
            lines += ["", "üìà Snapshot th·ªã tr∆∞·ªùng:", f"‚Ä¢ {fmt_snap('BTC', btc)}", f"‚Ä¢ {fmt_snap('ETH', eth)}", "", f"üß≠ Bias s∆° b·ªô: {bias}", "üí° M·∫πo: ƒê·ª©ng ngo√†i 5‚Äì10‚Äô quanh gi·ªù ra tin; tr√°nh FOMO n·∫øn ƒë·∫ßu."]
            await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID, text="\n".join(lines), parse_mode="HTML")
            _pre_announced.add(key)

# ========= PH√ÇN T√çCH L√öC RA TIN ‚Äî SAU GI·ªú =========
async def job_macro_watch_post(context: ContextTypes.DEFAULT_TYPE):
    events = await fetch_macro_week()
    if not events: return
    now = datetime.now(VN_TZ)
    candidates = []
    for e in events:
        dtv = e["time_vn"]
        if 0 <= (now - dtv).total_seconds() <= 15*60:
            if e.get("actual") and e["id"] not in _post_reported:
                candidates.append(e)
    if not candidates: return

    async with aiohttp.ClientSession() as session:
        for e in candidates:
            try:
                btc = await quick_signal_metrics(session, "BTCUSDT", interval="5m")
                eth = await quick_signal_metrics(session, "ETHUSDT", interval="5m")
            except Exception:
                btc = {}; eth = {}
            bias = _macro_bias(e.get("title") or "", e.get("actual") or "", e.get("forecast") or "", e.get("previous") or "")
            def fmt_snap(sym, m):
                return f"{sym}: funding {m.get('funding',0):.4f} | Vol5m x{(m.get('vol_ratio') or 1.0):.2f}"
            lines = [
                f"üõéÔ∏è <b>K·∫øt qu·∫£ v·ª´a c√¥ng b·ªë:</b> {e['title_vi']}",
                f"üïí Gi·ªù VN: {e['time_vn'].strftime('%H:%M %d/%m')}",
                f"üìä ·∫¢nh h∆∞·ªüng: {e['impact']}",
            ]
            trio = []
            if e.get("actual"):   trio.append(f"Th·ª±c t·∫ø: {e['actual']}")
            if e.get("forecast"): trio.append(f"D·ª± b√°o: {e['forecast']}")
            if e.get("previous"): trio.append(f"Tr∆∞·ªõc: {e['previous']}")
            if trio: lines.append(" ‚Äî ".join(trio))
            lines += ["", "üìà Snapshot sau tin:", f"‚Ä¢ {fmt_snap('BTC', btc)}", f"‚Ä¢ {fmt_snap('ETH', eth)}", "", f"üß≠ ƒê√°nh gi√°: {bias}", "‚ö†Ô∏è L∆∞u √Ω: N·∫øn ƒë·∫ßu sau tin th∆∞·ªùng nhi·ªÖu; ch·ªù x√°c nh·∫≠n 1‚Äì3 n·∫øn."]
            await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID, text="\n".join(lines), parse_mode="HTML")
            _post_reported.add(e["id"])

# ========= 22:00 ‚Äî T·ªïng k·∫øt =========
async def job_night_summary(context: ContextTypes.DEFAULT_TYPE):
    snap = snapshot()
    text = (
        "üåí T·ªïng k·∫øt phi√™n\n"
        f"‚Ä¢ T√≠n hi·ªáu ƒë√£ g·ª≠i: {snap['signals_sent']}\n"
        f"‚Ä¢ C·∫£nh b√°o kh·∫©n: {snap['alerts_sent']}\n"
        "‚Ä¢ D·ª± b√°o t·ªëi: Gi·ªØ k·ª∑ lu·∫≠t, gi·∫£m ƒë√≤n b·∫©y khi bi·∫øn ƒë·ªông m·∫°nh.\n\n"
        "üåô C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng h√†nh c√πng Cofure h√¥m nay. üò¥ Ng·ªß ngon nha!"
    )
    await context.bot.send_message(chat_id=TELEGRAM_ALLOWED_USER_ID, text=text)

# ========= ƒêƒÇNG K√ù JOB =========
def setup_jobs(app: Application):
    jq = app.job_queue
    if jq is None:
        jq = JobQueue()
        jq.set_application(app)
        jq.start()
        app.job_queue = jq

    jq.run_daily(job_morning,       time=dt.time(hour=6,  minute=0, tzinfo=VN_TZ), name="morning_0600")
    jq.run_daily(job_macro,         time=dt.time(hour=7,  minute=0, tzinfo=VN_TZ), name="macro_0700")

    jq.run_repeating(job_halfhour_signals, interval=1800, first=5,  name="signals_30m")

    # Kh·∫©n: 10 ph√∫t/l·∫ßn, nh∆∞ng do b·ªô l·ªçc si·∫øt m·∫°nh n√™n s·∫Ω r·∫•t h·∫°n ch·∫ø
    jq.run_repeating(job_urgent_alerts,    interval=600,  first=15, name="alerts_10m")

    # Ph√¢n t√≠ch l·ªãch: 5 ph√∫t/l·∫ßn
    jq.run_repeating(job_macro_watch_pre,  interval=300,  first=20, name="macro_pre_5m")
    jq.run_repeating(job_macro_watch_post, interval=300,  first=50, name="macro_post_5m")

    jq.run_daily(job_night_summary, time=dt.time(hour=22, minute=0, tzinfo=VN_TZ), name="summary_2200")
